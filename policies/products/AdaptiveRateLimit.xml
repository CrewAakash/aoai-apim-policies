<!--
	These policies are defined at a Product level - the product being a Batch processor
-->
<policies>
	<inbound>
		<base />
		<base />
        <!-- Global token rate limit governing the overall token allocation acorss all use cases -->
        <rate-limit-by-key calls="5000" renewal-period="60" counter-key="GlobalTokensLimit" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 400)" increment-count="@(context.Response.Body.As<JObject>(true).SelectToken("usage.total_tokens").ToObject<int>())" remaining-calls-variable-name="globalRemainingTokens" remaining-calls-header-name="globalRemainingTokens" total-calls-header-name="globalTotalTokens" />
		<choose>
			<when condition="@(context.Subscription.Name == "usecase-1")">
				<!-- Adaptive token rate limit -->
				<!-- If a request lands here, then this usecase will be allocated additional tokens from the global token bucket -->
                <rate-limit-by-key calls="@{
                var defaultTokens = 1000;
                if (context.Variables["globalRemainingTokens"] is int globalRemainingTokens && globalRemainingTokens > 0)
                {
                    defaultTokens += (int)(globalRemainingTokens * 0.1); // + allocate additional 10% of remaining global limit
                }
                return defaultTokens;
                }" renewal-period="60" counter-key="usecase1key" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 400)" increment-count="@(context.Response.Body.As<JObject>(true).SelectToken("usage.total_tokens").ToObject<int>())" remaining-calls-variable-name="remainingTokensUsecase1" remaining-calls-header-name="remainingTokensUsecase1" total-calls-header-name="totalTokensUseCase1" />
				<set-variable name="BusinessUnitName" value="usecase-1" />
			</when>
			<when condition="@(context.Subscription.Name == "usecase-2")">
				<!-- Adaptive token rate limit -->
                <rate-limit-by-key calls="@{
                var defaultTokens = 500;
                if (context.Variables["globalRemainingTokens"] is int globalRemainingTokens && globalRemainingTokens > 0)
                {
                    defaultTokens += (int)(globalRemainingTokens * 0.1); // + allocate additional 10% of remaining global limit
                }
                return defaultTokens;
                }" renewal-period="60" counter-key="usecase2key" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 400)" increment-count="@(context.Response.Body.As<JObject>(true).SelectToken("usage.total_tokens").ToObject<int>())" remaining-calls-variable-name="remainingTokensUsecase2" remaining-calls-header-name="remainingTokensUsecase2" total-calls-header-name="totalTokensUseCase2" />
				<set-variable name="BusinessUnitName" value="usecase-2" />
			</when>
			<otherwise>
				<!-- Fixed rate limit for Tokens -->
				<rate-limit-by-key calls="5" renewal-period="60" counter-key="@(context.Subscription.Id)" />
				<set-variable name="BusinessUnitName" value="other-usecases" />
			</otherwise>
		</choose>
	</inbound>
	<backend>
		<!--The backend section inherits the base behavior without additional policies.-->
		<base />
	</backend>
	<outbound>
		<base />
		<choose>
			<!--Chargeback model using eventhub logging 
				Conditional Logging to EventHub:
				Logs specific information to an EventHub if the response status code is 200.
				Captures various request and response details like service name, gateway ID, request ID, operation name, subscription ID, product ID, business unit name, invoked OpenAI instance, and total tokens used.-->
			<when condition="@(context.Response.StatusCode == 200)">
				<log-to-eventhub logger-id="apim-eh-logger">@{
                    return new JObject(
                        new JProperty("Type", "Message"),
                        new JProperty("EventTime", DateTime.UtcNow.ToString()),
                        new JProperty("ServiceName", context.Deployment.ServiceName),
                        new JProperty("GatewayId", context.Deployment.Gateway.Id),
                        new JProperty("RequestId", context.RequestId),
                        new JProperty("RequestIp", context.Request.IpAddress),
                        new JProperty("OperationName", context.Operation.Name),
                        new JProperty("SubscriptionId", context.Subscription.Id),
                        new JProperty("ProductId", context.Product.Id),
                        new JProperty("BusinessUnitName", context.Variables["BusinessUnitName"]),
                        new JProperty("OpenAIInstanceInvoked", context.Variables["OpenAI-Instance-Invoked"]),
                        new JProperty("TotalTokens",  context.Response.Body.As&lt;JObject&gt;(preserveContent: true).SelectToken("usage.total_tokens").ToString())
                    ).ToString();
                }</log-to-eventhub>
			</when>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 200)">
				<!--
					NOTE: To retrieve context.Response.Body in inbound section, this object needs to be accessed first in the outbound section of the policy. Not doing so will return null body in Inbound section.
					We are using preserveContent=true when deserializing response body stream into a JSON object since we intend to access it again. See details on htTPM://docs.microsoft.com/en-us/azure/api-management/api-management-transformation-policies#SetBody 
				-->
				<!--Response Modification:
					Checks if the response status code is 200.
					Converts the response body into a JSON object to be returned as a string.-->
				<set-body>@{                   
                JObject api_response = context.Response.Body.As&lt;JObject&gt;(preserveContent: true);                
                return api_response.ToString();                         
                }</set-body>
			</when>
		</choose>
	</outbound>
	<on-error>
		<base />
		<choose>
			<when condition="@(context.LastError != null && context.Response.StatusCode == 429 )">
				<!--Logging Rate Limit Errors:
					Logs rate limit errors (429 status code) to an EventHub for downstream processing.
					Captures error details such as error message, reason, timestamp, service name, gateway ID, request ID, operation name, subscription ID, and product ID. -->
				<log-to-eventhub logger-id="apim-eh-logger">@{
                        return new JObject(
                            new JProperty("Type", "Error"),
                            new JProperty("ErrorMessage", context.LastError.Message),
                            new JProperty("ErrorReason", context.LastError.Reason),
                            new JProperty("EventTime", DateTime.UtcNow.ToString()),
                            new JProperty("ServiceName", context.Deployment.ServiceName),
                            new JProperty("GatewayId", context.Deployment.Gateway.Id),
                            new JProperty("RequestId", context.RequestId),
                            new JProperty("RequestIp", context.Request.IpAddress),
                            new JProperty("OperationName", context.Operation.Name),
                            new JProperty("SubscriptionId", context.Subscription.Id),
                            new JProperty("ProductId", context.Product.Id)
                        ).ToString();
                    }</log-to-eventhub>
			</when>
		</choose>
	</on-error>
</policies>